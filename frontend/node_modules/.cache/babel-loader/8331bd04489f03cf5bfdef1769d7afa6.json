{"ast":null,"code":"import _assertThisInitialized from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _createForOfIteratorHelper from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _toConsumableArray from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _classCallCheck from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _asyncToGenerator from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectWithoutProperties from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";\nimport _slicedToArray from \"C:/Users/user/Desktop/bann-estore/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _excluded = [\"onLoad\", \"onError\"];\nimport _regeneratorRuntime from \"C:\\\\Users\\\\user\\\\Desktop\\\\bann-estore\\\\frontend\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\n\nfunction useLoadScript(src, onLoad, onError) {\n  useEffect(function () {\n    if (!document) {\n      return;\n    } // Find script tag with same src in DOM.\n\n\n    var foundScript = document.querySelector(\"script[src=\\\"\".concat(src, \"\\\"]\")); // Call onLoad if script marked as loaded.\n\n    if (foundScript === null || foundScript === void 0 ? void 0 : foundScript.dataset.loaded) {\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n      return;\n    } // Create or get existed tag.\n\n\n    var script = foundScript || document.createElement(\"script\"); // Set src if no script was found.\n\n    if (!foundScript) {\n      script.src = src;\n    } // Mark script as loaded on load event.\n\n\n    var onLoadWithMarker = function onLoadWithMarker() {\n      script.dataset.loaded = \"1\";\n      onLoad === null || onLoad === void 0 ? void 0 : onLoad();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    } // Add to DOM if not yet added.\n\n\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return function () {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\n\n\nfunction useLoadGoogleCharts(param) {\n  var _param$chartVersion = param.chartVersion,\n      chartVersion = _param$chartVersion === void 0 ? \"current\" : _param$chartVersion,\n      _param$chartPackages = param.chartPackages,\n      chartPackages = _param$chartPackages === void 0 ? [\"corechart\", \"controls\"] : _param$chartPackages,\n      _param$chartLanguage = param.chartLanguage,\n      chartLanguage = _param$chartLanguage === void 0 ? \"en\" : _param$chartLanguage,\n      mapsApiKey = param.mapsApiKey;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      googleCharts = _useState2[0],\n      setGoogleCharts = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      failed = _useState4[0],\n      setFailed = _useState4[1];\n\n  useLoadScript(\"https://www.gstatic.com/charts/loader.js\", function () {\n    // @ts-expect-error Getting object from global namespace.\n    var google = window === null || window === void 0 ? void 0 : window.google;\n\n    if (!google) {\n      return;\n    }\n\n    google.charts.load(chartVersion, {\n      packages: chartPackages,\n      language: chartLanguage,\n      mapsApiKey: mapsApiKey\n    });\n    google.charts.setOnLoadCallback(function () {\n      setGoogleCharts(google);\n    });\n  }, function () {\n    setFailed(true);\n  });\n  return [googleCharts, failed];\n}\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\n\n\nfunction LoadGoogleCharts(param) {\n  var onLoad = param.onLoad,\n      onError = param.onError,\n      params = _objectWithoutProperties(param, _excluded);\n\n  var _useLoadGoogleCharts = useLoadGoogleCharts(params),\n      _useLoadGoogleCharts2 = _slicedToArray(_useLoadGoogleCharts, 2),\n      googleCharts = _useLoadGoogleCharts2[0],\n      failed = _useLoadGoogleCharts2[1];\n\n  useEffect(function () {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n  useEffect(function () {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n  return null;\n}\n\nvar chartDefaultProps = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: function getChartWrapper() {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1\n  },\n  rootProps: {},\n  chartWrapperParams: {}\n};\nvar uniqueID = 0;\n\nvar generateUniqueID = function generateUniqueID() {\n  uniqueID += 1;\n  return \"reactgooglegraph-\".concat(uniqueID);\n};\n\nvar DEFAULT_CHART_COLORS = [\"#3366CC\", \"#DC3912\", \"#FF9900\", \"#109618\", \"#990099\", \"#3B3EAC\", \"#0099C6\", \"#DD4477\", \"#66AA00\", \"#B82E2E\", \"#316395\", \"#994499\", \"#22AA99\", \"#AAAA11\", \"#6633CC\", \"#E67300\", \"#8B0707\", \"#329262\", \"#5574A6\", \"#3B3EAC\"];\n\nvar loadDataTableFromSpreadSheet = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(googleViz, spreadSheetUrl) {\n    var urlParams,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            urlParams = _args.length > 2 && _args[2] !== void 0 ? _args[2] : {};\n            return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n              var headers = \"\".concat(urlParams.headers ? \"headers=\".concat(urlParams.headers) : \"headers=0\");\n              var queryString = \"\".concat(urlParams.query ? \"&tq=\".concat(encodeURIComponent(urlParams.query)) : \"\");\n              var gid = \"\".concat(urlParams.gid ? \"&gid=\".concat(urlParams.gid) : \"\");\n              var sheet = \"\".concat(urlParams.sheet ? \"&sheet=\".concat(urlParams.sheet) : \"\");\n              var access_token = \"\".concat(urlParams.access_token ? \"&access_token=\".concat(urlParams.access_token) : \"\");\n              var urlQueryString = \"\".concat(headers).concat(gid).concat(sheet).concat(queryString).concat(access_token);\n              var urlToSpreadSheet = \"\".concat(spreadSheetUrl, \"/gviz/tq?\").concat(urlQueryString); //&tq=${queryString}`;\n\n              //&tq=${queryString}`;\n              var query = new googleViz.visualization.Query(urlToSpreadSheet);\n              query.send(function (response) {\n                if (response.isError()) {\n                  reject(\"Error in query:  \".concat(response.getMessage(), \" \").concat(response.getDetailedMessage()));\n                } else {\n                  resolve(response.getDataTable());\n                }\n              });\n            }));\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function loadDataTableFromSpreadSheet(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar _React$createContext = /*#__PURE__*/React.createContext(chartDefaultProps),\n    Provider = _React$createContext.Provider,\n    Consumer = _React$createContext.Consumer;\n\nvar ContextProvider = function ContextProvider(param) {\n  var children = param.children,\n      value = param.value;\n  return /*#__PURE__*/React.createElement(Provider, {\n    value: value\n  }, children);\n};\n\nvar ContextConsumer = function ContextConsumer(param) {\n  var render = param.render;\n  return /*#__PURE__*/React.createElement(Consumer, null, function (context) {\n    return render(context);\n  });\n};\n\nvar GRAY_COLOR = \"#CCCCCC\";\n\nvar GoogleChartDataTableInner = /*#__PURE__*/function (_React$Component) {\n  _inherits(GoogleChartDataTableInner, _React$Component);\n\n  var _super = _createSuper(GoogleChartDataTableInner);\n\n  function GoogleChartDataTableInner() {\n    var _this2;\n\n    _classCallCheck(this, GoogleChartDataTableInner);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      hiddenColumns: []\n    };\n\n    _this2.listenToLegendToggle = function () {\n      var _this2$props = _this2.props,\n          google = _this2$props.google,\n          googleChartWrapper = _this2$props.googleChartWrapper;\n      google.visualization.events.addListener(googleChartWrapper, \"select\", function () {\n        var chart = googleChartWrapper.getChart();\n        var selection = chart.getSelection();\n        var dataTable = googleChartWrapper.getDataTable();\n\n        if (selection.length === 0 || // We want to listen to when a whole row is selected. This is the case only when row === null\n        selection[0].row || !dataTable) {\n          return;\n        }\n\n        var columnIndex = selection[0].column;\n\n        var columnID = _this2.getColumnID(dataTable, columnIndex);\n\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: _toConsumableArray(state.hiddenColumns.filter(function (colID) {\n                return colID !== columnID;\n              }))\n            });\n          });\n        } else {\n          _this2.setState(function (state) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              hiddenColumns: [].concat(_toConsumableArray(state.hiddenColumns), [columnID])\n            });\n          });\n        }\n      });\n    };\n\n    _this2.applyFormatters = function (dataTable, formatters) {\n      var google = _this2.props.google;\n\n      var _iterator = _createForOfIteratorHelper(formatters),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var formatter = _step.value;\n\n          switch (formatter.type) {\n            case \"ArrowFormat\":\n              {\n                var vizFormatter = new google.visualization.ArrowFormat(formatter.options);\n                vizFormatter.format(dataTable, formatter.column);\n                break;\n              }\n\n            case \"BarFormat\":\n              {\n                var _vizFormatter = new google.visualization.BarFormat(formatter.options);\n\n                _vizFormatter.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"ColorFormat\":\n              {\n                var _vizFormatter2 = new google.visualization.ColorFormat(formatter.options);\n\n                var ranges = formatter.ranges;\n\n                var _iterator2 = _createForOfIteratorHelper(ranges),\n                    _step2;\n\n                try {\n                  for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                    var range = _step2.value;\n\n                    _vizFormatter2.addRange.apply(_vizFormatter2, _toConsumableArray(range));\n                  }\n                } catch (err) {\n                  _iterator2.e(err);\n                } finally {\n                  _iterator2.f();\n                }\n\n                _vizFormatter2.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"DateFormat\":\n              {\n                var _vizFormatter3 = new google.visualization.DateFormat(formatter.options);\n\n                _vizFormatter3.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"NumberFormat\":\n              {\n                var _vizFormatter4 = new google.visualization.NumberFormat(formatter.options);\n\n                _vizFormatter4.format(dataTable, formatter.column);\n\n                break;\n              }\n\n            case \"PatternFormat\":\n              {\n                var _vizFormatter5 = new google.visualization.PatternFormat(formatter.options);\n\n                _vizFormatter5.format(dataTable, formatter.column);\n\n                break;\n              }\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    };\n\n    _this2.getColumnID = function (dataTable, columnIndex) {\n      return dataTable.getColumnId(columnIndex) || dataTable.getColumnLabel(columnIndex);\n    };\n\n    _this2.draw = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(param) {\n        var data, diffdata, rows, columns, options, legend_toggle, legendToggle, chartType, formatters, spreadSheetUrl, spreadSheetQueryParameters, _this2$props2, google, googleChartWrapper, dataTable, chartDiff, oldData, newData, columnCount, i, columnID, previousColumnLabel, previousColumnID, previousColumnType, chart;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                data = param.data, diffdata = param.diffdata, rows = param.rows, columns = param.columns, options = param.options, legend_toggle = param.legend_toggle, legendToggle = param.legendToggle, chartType = param.chartType, formatters = param.formatters, spreadSheetUrl = param.spreadSheetUrl, spreadSheetQueryParameters = param.spreadSheetQueryParameters;\n                _this2$props2 = _this2.props, google = _this2$props2.google, googleChartWrapper = _this2$props2.googleChartWrapper;\n                chartDiff = null;\n\n                if (diffdata) {\n                  oldData = google.visualization.arrayToDataTable(diffdata.old);\n                  newData = google.visualization.arrayToDataTable(diffdata.new);\n                  chartDiff = google.visualization[chartType].prototype.computeDiff(oldData, newData);\n                }\n\n                if (!(data !== null)) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                if (Array.isArray(data)) {\n                  dataTable = google.visualization.arrayToDataTable(data);\n                } else {\n                  dataTable = new google.visualization.DataTable(data);\n                }\n\n                _context2.next = 19;\n                break;\n\n              case 8:\n                if (!(rows && columns)) {\n                  _context2.next = 12;\n                  break;\n                }\n\n                dataTable = google.visualization.arrayToDataTable([columns].concat(_toConsumableArray(rows)));\n                _context2.next = 19;\n                break;\n\n              case 12:\n                if (!spreadSheetUrl) {\n                  _context2.next = 18;\n                  break;\n                }\n\n                _context2.next = 15;\n                return loadDataTableFromSpreadSheet(google, spreadSheetUrl, spreadSheetQueryParameters);\n\n              case 15:\n                dataTable = _context2.sent;\n                _context2.next = 19;\n                break;\n\n              case 18:\n                dataTable = google.visualization.arrayToDataTable([]);\n\n              case 19:\n                columnCount = dataTable.getNumberOfColumns();\n\n                for (i = 0; i < columnCount; i += 1) {\n                  columnID = _this2.getColumnID(dataTable, i);\n\n                  if (_this2.state.hiddenColumns.includes(columnID)) {\n                    previousColumnLabel = dataTable.getColumnLabel(i);\n                    previousColumnID = dataTable.getColumnId(i);\n                    previousColumnType = dataTable.getColumnType(i);\n                    dataTable.removeColumn(i);\n                    dataTable.addColumn({\n                      label: previousColumnLabel,\n                      id: previousColumnID,\n                      type: previousColumnType\n                    });\n                  }\n                }\n\n                chart = googleChartWrapper.getChart();\n\n                if (googleChartWrapper.getChartType() === \"Timeline\") {\n                  chart && chart.clearChart();\n                }\n\n                googleChartWrapper.setChartType(chartType);\n                googleChartWrapper.setOptions(options || {});\n                googleChartWrapper.setDataTable(dataTable);\n                googleChartWrapper.draw();\n\n                if (_this2.props.googleChartDashboard !== null) {\n                  _this2.props.googleChartDashboard.draw(dataTable);\n                }\n\n                if (chartDiff) {\n                  googleChartWrapper.setDataTable(chartDiff);\n                  googleChartWrapper.draw();\n                }\n\n                if (formatters) {\n                  _this2.applyFormatters(dataTable, formatters);\n\n                  googleChartWrapper.setDataTable(dataTable);\n                  googleChartWrapper.draw();\n                }\n\n                if (legendToggle === true || legend_toggle === true) {\n                  _this2.grayOutHiddenColumns({\n                    options: options\n                  });\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    _this2.grayOutHiddenColumns = function (param) {\n      var options = param.options;\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      var dataTable = googleChartWrapper.getDataTable();\n      if (!dataTable) return;\n      var columnCount = dataTable.getNumberOfColumns();\n      var hasAHiddenColumn = _this2.state.hiddenColumns.length > 0;\n      if (hasAHiddenColumn === false) return;\n      var colors = Array.from({\n        length: columnCount - 1\n      }).map(function (dontcare, i) {\n        var columnID = _this2.getColumnID(dataTable, i + 1);\n\n        if (_this2.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      });\n      googleChartWrapper.setOptions(_objectSpread(_objectSpread({}, options), {}, {\n        colors: colors\n      }));\n      googleChartWrapper.draw();\n    };\n\n    _this2.onResize = function () {\n      var googleChartWrapper = _this2.props.googleChartWrapper;\n      googleChartWrapper.draw();\n    };\n\n    return _this2;\n  }\n\n  _createClass(GoogleChartDataTableInner, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.draw(this.props);\n      window.addEventListener(\"resize\", this.onResize);\n\n      if (this.props.legend_toggle || this.props.legendToggle) {\n        this.listenToLegendToggle();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this$props = this.props,\n          google = _this$props.google,\n          googleChartWrapper = _this$props.googleChartWrapper;\n      window.removeEventListener(\"resize\", this.onResize);\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n\n      if (googleChartWrapper.getChartType() === \"Timeline\") {\n        googleChartWrapper.getChart() && googleChartWrapper.getChart().clearChart();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      this.draw(this.props);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return GoogleChartDataTableInner;\n}(React.Component);\n\nvar GoogleChartDataTable = /*#__PURE__*/function (_React$Component2) {\n  _inherits(GoogleChartDataTable, _React$Component2);\n\n  var _super2 = _createSuper(GoogleChartDataTable);\n\n  function GoogleChartDataTable() {\n    _classCallCheck(this, GoogleChartDataTable);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(GoogleChartDataTable, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {}\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {}\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          google = _this$props2.google,\n          googleChartWrapper = _this$props2.googleChartWrapper,\n          googleChartDashboard = _this$props2.googleChartDashboard;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(props) {\n          return /*#__PURE__*/React.createElement(GoogleChartDataTableInner, Object.assign({}, props, {\n            google: google,\n            googleChartWrapper: googleChartWrapper,\n            googleChartDashboard: googleChartDashboard\n          }));\n        }\n      });\n    }\n  }]);\n\n  return GoogleChartDataTable;\n}(React.Component);\n\nvar GoogleChartEvents = /*#__PURE__*/function (_React$Component3) {\n  _inherits(GoogleChartEvents, _React$Component3);\n\n  var _super3 = _createSuper(GoogleChartEvents);\n\n  function GoogleChartEvents() {\n    _classCallCheck(this, GoogleChartEvents);\n\n    return _super3.apply(this, arguments);\n  }\n\n  _createClass(GoogleChartEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate() {\n      return false;\n    }\n  }, {\n    key: \"listenToEvents\",\n    value: function listenToEvents(param) {\n      var _this3 = this;\n\n      var chartEvents = param.chartEvents,\n          google = param.google,\n          googleChartWrapper = param.googleChartWrapper;\n\n      if (!chartEvents) {\n        return;\n      }\n\n      google.visualization.events.removeAllListeners(googleChartWrapper);\n\n      var _iterator3 = _createForOfIteratorHelper(chartEvents),\n          _step3;\n\n      try {\n        var _loop = function _loop() {\n          var event = _step3.value;\n          _this = _this3;\n          var eventName = event.eventName,\n              callback = event.callback;\n          google.visualization.events.addListener(googleChartWrapper, eventName, function () {\n            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n              args[_key] = arguments[_key];\n            }\n\n            callback({\n              chartWrapper: googleChartWrapper,\n              props: _this.props,\n              google: google,\n              eventArgs: args\n            });\n          });\n        };\n\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var _this;\n\n          _loop();\n        }\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          google = _this$props3.google,\n          googleChartWrapper = _this$props3.googleChartWrapper;\n      return /*#__PURE__*/React.createElement(ContextConsumer, {\n        render: function render(propsFromContext) {\n          _this4.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google: google,\n            googleChartWrapper: googleChartWrapper\n          });\n\n          return null;\n        }\n      });\n    }\n  }]);\n\n  return GoogleChartEvents;\n}(React.Component);\n\nvar controlCounter = 0;\n\nvar GoogleChart = /*#__PURE__*/function (_React$Component4) {\n  _inherits(GoogleChart, _React$Component4);\n\n  var _super4 = _createSuper(GoogleChart);\n\n  function GoogleChart() {\n    var _this5;\n\n    for (var _len3 = arguments.length, args1 = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args1[_key3] = arguments[_key3];\n    }\n\n    _classCallCheck(this, GoogleChart);\n\n    var _this1;\n\n    _this5 = _super4.call(this), _this1 = _assertThisInitialized(_this5);\n    _this5.state = {\n      googleChartWrapper: null,\n      googleChartDashboard: null,\n      googleChartControls: null,\n      googleChartEditor: null,\n      isReady: false\n    };\n    _this5.graphID = null;\n    _this5.dashboard_ref = /*#__PURE__*/React.createRef();\n    _this5.toolbar_ref = /*#__PURE__*/React.createRef();\n\n    _this5.getGraphID = function () {\n      var _this5$props = _this5.props,\n          graphID = _this5$props.graphID,\n          graph_id = _this5$props.graph_id;\n      var instanceGraphID;\n\n      if (!graphID && !graph_id) {\n        if (!_this5.graphID) {\n          instanceGraphID = generateUniqueID();\n        } else {\n          instanceGraphID = _this5.graphID;\n        }\n      } else if (graphID && !graph_id) {\n        instanceGraphID = graphID;\n      } else if (graph_id && !graphID) {\n        instanceGraphID = graph_id;\n      } else {\n        instanceGraphID = graphID;\n      }\n\n      _this5.graphID = instanceGraphID;\n      return _this5.graphID;\n    };\n\n    _this5.getControlID = function (id, index) {\n      controlCounter += 1;\n      var controlID;\n\n      if (typeof id === \"undefined\") {\n        controlID = \"googlechart-control-\".concat(index, \"-\").concat(controlCounter);\n      } else {\n        controlID = id;\n      }\n\n      return controlID;\n    };\n\n    _this5.addControls = function (googleChartWrapper, googleChartDashboard) {\n      var _this5$props2 = _this5.props,\n          google = _this5$props2.google,\n          controls = _this5$props2.controls;\n      var googleChartControls = !controls ? null : controls.map(function (control, i) {\n        var controlIDMaybe = control.controlID,\n            controlType = control.controlType,\n            controlOptions = control.options,\n            controlWrapperParams = control.controlWrapperParams;\n\n        var controlID = _this5.getControlID(controlIDMaybe, i);\n\n        return {\n          controlProp: control,\n          control: new google.visualization.ControlWrapper(_objectSpread({\n            containerId: controlID,\n            controlType: controlType,\n            options: controlOptions\n          }, controlWrapperParams))\n        };\n      });\n\n      if (!googleChartControls) {\n        return null;\n      }\n\n      googleChartDashboard.bind(googleChartControls.map(function (param) {\n        var control = param.control;\n        return control;\n      }), googleChartWrapper);\n\n      var _iterator4 = _createForOfIteratorHelper(googleChartControls),\n          _step4;\n\n      try {\n        var _loop2 = function _loop2() {\n          var chartControl = _step4.value;\n          var control = chartControl.control,\n              controlProp = chartControl.controlProp;\n          var _controlProp$controlE = controlProp.controlEvents,\n              controlEvents = _controlProp$controlE === void 0 ? [] : _controlProp$controlE;\n\n          var _iterator5 = _createForOfIteratorHelper(controlEvents),\n              _step5;\n\n          try {\n            var _loop3 = function _loop3() {\n              var event = _step5.value;\n              _this = _assertThisInitialized(_this5);\n              var callback = event.callback,\n                  eventName = event.eventName;\n              google.visualization.events.removeListener(control, eventName, callback);\n              google.visualization.events.addListener(control, eventName, function () {\n                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n                  args[_key] = arguments[_key];\n                }\n\n                callback({\n                  chartWrapper: googleChartWrapper,\n                  controlWrapper: control,\n                  props: _this.props,\n                  google: google,\n                  eventArgs: args\n                });\n              });\n            };\n\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              _loop3();\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n        };\n\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var _this;\n\n          _loop2();\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n\n      return googleChartControls;\n    };\n\n    _this5.renderChart = function () {\n      var _this5$props3 = _this5.props,\n          width = _this5$props3.width,\n          height = _this5$props3.height,\n          options = _this5$props3.options,\n          style = _this5$props3.style,\n          className = _this5$props3.className,\n          rootProps = _this5$props3.rootProps,\n          google = _this5$props3.google;\n\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n\n      return /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        id: _this5.getGraphID(),\n        style: divStyle,\n        className: className\n      }, rootProps), _this5.state.isReady && _this5.state.googleChartWrapper !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(GoogleChartDataTable, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google,\n        googleChartDashboard: _this5.state.googleChartDashboard\n      }), /*#__PURE__*/React.createElement(GoogleChartEvents, {\n        googleChartWrapper: _this5.state.googleChartWrapper,\n        google: google\n      })) : null);\n    };\n\n    _this5.renderControl = function () {\n      var filter = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : function (param) {\n        return true;\n      };\n      return _this1.state.isReady && _this1.state.googleChartControls !== null ? /*#__PURE__*/React.createElement(React.Fragment, null, _this1.state.googleChartControls.filter(function (param) {\n        var controlProp = param.controlProp,\n            control = param.control;\n        return filter({\n          control: control,\n          controlProp: controlProp\n        });\n      }).map(function (param) {\n        var control = param.control,\n            controlProp = param.controlProp;\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: control.getContainerId(),\n          id: control.getContainerId()\n        });\n      })) : null;\n    };\n\n    _this5.renderToolBar = function () {\n      if (!_this5.props.toolbarItems) return null;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: _this5.toolbar_ref\n      });\n    };\n\n    return _this5;\n  }\n\n  _createClass(GoogleChart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props4 = this.props,\n          options = _this$props4.options,\n          google = _this$props4.google,\n          chartType = _this$props4.chartType,\n          chartWrapperParams = _this$props4.chartWrapperParams,\n          toolbarItems = _this$props4.toolbarItems,\n          getChartEditor = _this$props4.getChartEditor,\n          getChartWrapper = _this$props4.getChartWrapper;\n\n      var chartConfig = _objectSpread({\n        chartType: chartType,\n        options: options,\n        containerId: this.getGraphID()\n      }, chartWrapperParams);\n\n      var googleChartWrapper = new google.visualization.ChartWrapper(chartConfig);\n      googleChartWrapper.setOptions(options || {});\n\n      if (getChartWrapper) {\n        getChartWrapper(googleChartWrapper, google);\n      }\n\n      var googleChartDashboard = new google.visualization.Dashboard(this.dashboard_ref);\n      var googleChartControls = this.addControls(googleChartWrapper, googleChartDashboard);\n\n      if (toolbarItems) {\n        google.visualization.drawToolbar(this.toolbar_ref.current, toolbarItems);\n      }\n\n      var googleChartEditor = null;\n\n      if (getChartEditor) {\n        googleChartEditor = new google.visualization.ChartEditor();\n        getChartEditor({\n          chartEditor: googleChartEditor,\n          chartWrapper: googleChartWrapper,\n          google: google\n        });\n      }\n\n      this.setState({\n        googleChartEditor: googleChartEditor,\n        googleChartControls: googleChartControls,\n        googleChartDashboard: googleChartDashboard,\n        googleChartWrapper: googleChartWrapper,\n        isReady: true\n      });\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (!this.state.googleChartWrapper) return;\n      if (!this.state.googleChartDashboard) return;\n      if (!this.state.googleChartControls) return;\n      var controls = this.props.controls;\n\n      if (controls) {\n        for (var i = 0; i < controls.length; i += 1) {\n          var _controls$i = controls[i],\n              controlType = _controls$i.controlType,\n              options = _controls$i.options,\n              controlWrapperParams = _controls$i.controlWrapperParams;\n\n          if (controlWrapperParams && \"state\" in controlWrapperParams) {\n            this.state.googleChartControls[i].control.setState(controlWrapperParams[\"state\"]);\n          }\n\n          this.state.googleChartControls[i].control.setOptions(options);\n          this.state.googleChartControls[i].control.setControlType(controlType);\n        }\n      }\n    }\n  }, {\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      return this.state.isReady !== nextState.isReady || nextProps.controls !== this.props.controls;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props5 = this.props,\n          width = _this$props5.width,\n          height = _this$props5.height,\n          options = _this$props5.options,\n          style = _this$props5.style;\n\n      var divStyle = _objectSpread({\n        height: height || options && options.height,\n        width: width || options && options.width\n      }, style);\n\n      if (this.props.render) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.toolbar_ref,\n          id: \"toolbar\"\n        }), this.props.render({\n          renderChart: this.renderChart,\n          renderControl: this.renderControl,\n          renderToolbar: this.renderToolBar\n        }));\n      } else {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          ref: this.dashboard_ref,\n          style: divStyle\n        }, this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition !== \"bottom\";\n        }), this.renderChart(), this.renderControl(function (param) {\n          var controlProp = param.controlProp;\n          return controlProp.controlPosition === \"bottom\";\n        }), this.renderToolBar());\n      }\n    }\n  }]);\n\n  return GoogleChart;\n}(React.Component);\n\nvar Chart$1 = /*#__PURE__*/function (_React$Component5) {\n  _inherits(Chart$1, _React$Component5);\n\n  var _super5 = _createSuper(Chart$1);\n\n  function Chart$1() {\n    var _this6;\n\n    _classCallCheck(this, Chart$1);\n\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    _this6 = _super5.call.apply(_super5, [this].concat(args));\n    _this6._isMounted = false;\n    _this6.state = {\n      loadingStatus: \"loading\",\n      google: null\n    };\n\n    _this6.onLoad = function (google1) {\n      if (_this6.props.onLoad) {\n        _this6.props.onLoad(google1);\n      }\n\n      if (_this6.isFullyLoaded(google1)) {\n        _this6.onSuccess(google1);\n      } else {\n        // IE11: window.google is not fully set, we have to wait\n        var id = setInterval(function () {\n          var google = window.google;\n\n          if (_this6._isMounted) {\n            if (google && _this6.isFullyLoaded(google)) {\n              clearInterval(id);\n\n              _this6.onSuccess(google);\n            }\n          } else {\n            clearInterval(id);\n          }\n        }, 1000);\n      }\n    };\n\n    _this6.onSuccess = function (google) {\n      _this6.setState({\n        loadingStatus: \"ready\",\n        google: google\n      });\n    };\n\n    _this6.onError = function () {\n      _this6.setState({\n        loadingStatus: \"errored\"\n      });\n    };\n\n    return _this6;\n  }\n\n  _createClass(Chart$1, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n          chartLanguage = _this$props6.chartLanguage,\n          chartPackages = _this$props6.chartPackages,\n          chartVersion = _this$props6.chartVersion,\n          mapsApiKey = _this$props6.mapsApiKey,\n          loader = _this$props6.loader,\n          errorElement = _this$props6.errorElement;\n      return /*#__PURE__*/React.createElement(ContextProvider, {\n        value: this.props\n      }, this.state.loadingStatus === \"ready\" && this.state.google !== null ? /*#__PURE__*/React.createElement(GoogleChart, Object.assign({}, this.props, {\n        google: this.state.google\n      })) : this.state.loadingStatus === \"errored\" && errorElement ? errorElement : loader, /*#__PURE__*/React.createElement(LoadGoogleCharts, {\n        chartLanguage: chartLanguage,\n        chartPackages: chartPackages,\n        chartVersion: chartVersion,\n        mapsApiKey: mapsApiKey,\n        onLoad: this.onLoad,\n        onError: this.onError\n      }));\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._isMounted = true;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._isMounted = false;\n    }\n  }, {\n    key: \"isFullyLoaded\",\n    value: function isFullyLoaded(google) {\n      var _this$props7 = this.props,\n          controls = _this$props7.controls,\n          toolbarItems = _this$props7.toolbarItems,\n          getChartEditor = _this$props7.getChartEditor;\n      return google && google.visualization && google.visualization.ChartWrapper && google.visualization.Dashboard && (!controls || google.visualization.ChartWrapper) && (!getChartEditor || google.visualization.ChartEditor) && (!toolbarItems || google.visualization.drawToolbar);\n    }\n  }]);\n\n  return Chart$1;\n}(React.Component);\n\nChart$1.defaultProps = chartDefaultProps;\nvar GoogleDataTableColumnRoleType;\n\n(function (GoogleDataTableColumnRoleType) {\n  GoogleDataTableColumnRoleType[\"annotation\"] = \"annotation\";\n  GoogleDataTableColumnRoleType[\"annotationText\"] = \"annotationText\";\n  GoogleDataTableColumnRoleType[\"certainty\"] = \"certainty\";\n  GoogleDataTableColumnRoleType[\"emphasis\"] = \"emphasis\";\n  GoogleDataTableColumnRoleType[\"interval\"] = \"interval\";\n  GoogleDataTableColumnRoleType[\"scope\"] = \"scope\";\n  GoogleDataTableColumnRoleType[\"style\"] = \"style\";\n  GoogleDataTableColumnRoleType[\"tooltip\"] = \"tooltip\";\n  GoogleDataTableColumnRoleType[\"domain\"] = \"domain\";\n})(GoogleDataTableColumnRoleType || (GoogleDataTableColumnRoleType = {}));\n\nvar Chart = Chart$1;\nexport { Chart$1 as Chart, GoogleDataTableColumnRoleType, Chart as default };","map":{"version":3,"mappings":"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","names":["useLoadScript","src","onLoad","onError","useEffect","document","foundScript","querySelector","concat","dataset","loaded","script","createElement","onLoadWithMarker","addEventListener","head","append","removeEventListener","useLoadGoogleCharts","param","chartVersion","chartPackages","chartLanguage","mapsApiKey","useState","googleCharts","setGoogleCharts","failed","setFailed","google","window","charts","load","packages","language","setOnLoadCallback","LoadGoogleCharts","params","chartDefaultProps","legend_toggle","options","legendToggle","getChartWrapper","spreadSheetQueryParameters","headers","gid","rootProps","chartWrapperParams","uniqueID","generateUniqueID","DEFAULT_CHART_COLORS","loadDataTableFromSpreadSheet","googleViz","spreadSheetUrl","urlParams","Promise","resolve","reject","queryString","query","encodeURIComponent","sheet","access_token","urlQueryString","urlToSpreadSheet","visualization","Query","send","response","isError","getMessage","getDetailedMessage","getDataTable","React","createContext","Provider","Consumer","ContextProvider","children","value","ContextConsumer","render","context","GRAY_COLOR","GoogleChartDataTableInner","state","hiddenColumns","listenToLegendToggle","props","googleChartWrapper","events","addListener","chart","getChart","selection","getSelection","dataTable","length","row","columnIndex","column","columnID","getColumnID","includes","setState","filter","colID","applyFormatters","formatters","formatter","type","vizFormatter","ArrowFormat","format","BarFormat","ColorFormat","ranges","range","addRange","DateFormat","NumberFormat","PatternFormat","getColumnId","getColumnLabel","draw","data","diffdata","rows","columns","chartType","chartDiff","oldData","arrayToDataTable","old","newData","new","prototype","computeDiff","Array","isArray","DataTable","columnCount","getNumberOfColumns","i","previousColumnLabel","previousColumnID","previousColumnType","getColumnType","removeColumn","addColumn","label","id","getChartType","clearChart","setChartType","setOptions","setDataTable","googleChartDashboard","grayOutHiddenColumns","hasAHiddenColumn","colors","from","map","dontcare","onResize","componentDidMount","componentWillUnmount","removeAllListeners","componentDidUpdate","Component","GoogleChartDataTable","shouldComponentUpdate","Object","GoogleChartEvents","listenToEvents","chartEvents","event","eventName","callback","args","arguments","chartWrapper","eventArgs","propsFromContext","controlCounter","GoogleChart","googleChartControls","googleChartEditor","isReady","graphID","dashboard_ref","createRef","toolbar_ref","getGraphID","graph_id","instanceGraphID","getControlID","index","controlID","addControls","controls","control","controlIDMaybe","controlType","controlOptions","controlWrapperParams","controlProp","ControlWrapper","containerId","bind","chartControl","controlEvents","removeListener","controlWrapper","renderChart","width","height","style","className","divStyle","div","Fragment","renderControl","_this1","key","getContainerId","renderToolBar","toolbarItems","ref","getChartEditor","chartConfig","ChartWrapper","Dashboard","drawToolbar","current","ChartEditor","chartEditor","setControlType","nextProps","nextState","renderToolbar","controlPosition","Chart","_isMounted","loadingStatus","isFullyLoaded","onSuccess","setInterval","clearInterval","loader","errorElement","defaultProps","GoogleDataTableColumnRoleType","annotation","annotationText","certainty","emphasis","interval","scope","tooltip","domain"],"sources":["C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\hooks\\useLoadScript.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\hooks\\useLoadGoogleCharts.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\default-props.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\generate-unique-id.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\constants.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\load-data-table-from-spreadsheet.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\Context.tsx","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChartDataTable.tsx","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChartEvents.tsx","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\components\\GoogleChart.tsx","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\ReactGoogleCharts.tsx","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\types.ts","C:\\Users\\user\\Desktop\\bann-estore\\frontend\\node_modules\\react-google-charts\\src\\index.tsx"],"sourcesContent":["import { useEffect } from \"react\";\n\n/**\n * Hook to load external script.\n * @param src - Source url to load.\n * @param onLoad - Success callback.\n * @param onError - Error callback.\n */\nexport function useLoadScript(\n  src: string,\n  onLoad?: () => void,\n  onError?: () => void\n) {\n  useEffect(() => {\n    if (!document) {\n      return;\n    }\n\n    // Find script tag with same src in DOM.\n    const foundScript = document.querySelector<HTMLScriptElement>(\n      `script[src=\"${src}\"]`\n    );\n\n    // Call onLoad if script marked as loaded.\n    if (foundScript?.dataset.loaded) {\n      onLoad?.();\n      return;\n    }\n\n    // Create or get existed tag.\n    const script = foundScript || document.createElement(\"script\");\n\n    // Set src if no script was found.\n    if (!foundScript) {\n      script.src = src;\n    }\n\n    // Mark script as loaded on load event.\n    const onLoadWithMarker = () => {\n      script.dataset.loaded = \"1\";\n      onLoad?.();\n    };\n\n    script.addEventListener(\"load\", onLoadWithMarker);\n\n    if (onError) {\n      script.addEventListener(\"error\", onError);\n    }\n\n    // Add to DOM if not yet added.\n    if (!foundScript) {\n      document.head.append(script);\n    }\n\n    return () => {\n      script.removeEventListener(\"load\", onLoadWithMarker);\n\n      if (onError) {\n        script.removeEventListener(\"error\", onError);\n      }\n    };\n  }, []);\n}\n","import { useState, useEffect } from \"react\";\nimport { GoogleChartVersion, GoogleChartPackages, GoogleViz } from \"../types\";\nimport { useLoadScript } from \"./useLoadScript\";\n\nexport interface IUseLoadGoogleChartsParams {\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n}\n\n/**\n * Hook to load Google Charts JS API.\n * @param params - Load parameters.\n * @param [params.chartVersion] - Chart version to load.\n * @param [params.chartPackages] - Packages to load.\n * @param [params.chartLanguage] - Languages to load.\n * @param [params.mapsApiKey] - Google Maps api key.\n * @returns\n */\nexport function useLoadGoogleCharts({\n  chartVersion = \"current\",\n  chartPackages = [\"corechart\", \"controls\"],\n  chartLanguage = \"en\",\n  mapsApiKey,\n}: IUseLoadGoogleChartsParams) {\n  const [googleCharts, setGoogleCharts] = useState<GoogleViz | null>(null);\n  const [failed, setFailed] = useState(false);\n\n  useLoadScript(\n    \"https://www.gstatic.com/charts/loader.js\",\n    () => {\n      // @ts-expect-error Getting object from global namespace.\n      const google = window?.google as GoogleViz;\n\n      if (!google) {\n        return;\n      }\n\n      google.charts.load(chartVersion, {\n        packages: chartPackages,\n        language: chartLanguage,\n        mapsApiKey,\n      });\n      google.charts.setOnLoadCallback(() => {\n        setGoogleCharts(google);\n      });\n    },\n    () => {\n      setFailed(true);\n    }\n  );\n\n  return [googleCharts, failed] as const;\n}\n\nexport interface ILoadGoogleChartsProps extends IUseLoadGoogleChartsParams {\n  onLoad?(googleCharts: GoogleViz): void;\n  onError?(): void;\n}\n\n/**\n * Wrapper around useLoadGoogleCharts to use in legacy components.\n */\nexport function LoadGoogleCharts({\n  onLoad,\n  onError,\n  ...params\n}: ILoadGoogleChartsProps) {\n  const [googleCharts, failed] = useLoadGoogleCharts(params);\n\n  useEffect(() => {\n    if (googleCharts && onLoad) {\n      onLoad(googleCharts);\n    }\n  }, [googleCharts]);\n\n  useEffect(() => {\n    if (failed && onError) {\n      onError();\n    }\n  }, [failed]);\n\n  return null;\n}\n","import { ReactGoogleChartProps } from \"./types\";\n\nexport const chartDefaultProps: Partial<ReactGoogleChartProps> = {\n  // <DEPRECATED_PROPS>\n  legend_toggle: false,\n  // </DEPRECATED_PROPS>\n  options: {},\n  legendToggle: false,\n  getChartWrapper: () => {},\n  spreadSheetQueryParameters: {\n    headers: 1,\n    gid: 1,\n  },\n  rootProps: {},\n  chartWrapperParams: {},\n};\n","let uniqueID = 0;\nexport const generateUniqueID = () => {\n  uniqueID += 1;\n  return `reactgooglegraph-${uniqueID}`;\n};\n","export const DEFAULT_CHART_COLORS = [\n  \"#3366CC\",\n  \"#DC3912\",\n  \"#FF9900\",\n  \"#109618\",\n  \"#990099\",\n  \"#3B3EAC\",\n  \"#0099C6\",\n  \"#DD4477\",\n  \"#66AA00\",\n  \"#B82E2E\",\n  \"#316395\",\n  \"#994499\",\n  \"#22AA99\",\n  \"#AAAA11\",\n  \"#6633CC\",\n  \"#E67300\",\n  \"#8B0707\",\n  \"#329262\",\n  \"#5574A6\",\n  \"#3B3EAC\"\n];\n","import { GoogleViz } from \"./types\";\n\nexport const loadDataTableFromSpreadSheet = async (\n  googleViz: GoogleViz,\n  spreadSheetUrl: string,\n  urlParams: {\n    headers?: number;\n    gid?: any;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  } = {}\n) => {\n  return new Promise((resolve, reject) => {\n    const headers = `${\n      urlParams.headers ? `headers=${urlParams.headers}` : `headers=0`\n    }`;\n    const queryString = `${\n      urlParams.query ? `&tq=${encodeURIComponent(urlParams.query)}` : ``\n    }`;\n    const gid = `${urlParams.gid ? `&gid=${urlParams.gid}` : \"\"}`;\n    const sheet = `${urlParams.sheet ? `&sheet=${urlParams.sheet}` : \"\"}`;\n    const access_token = `${\n      urlParams.access_token ? `&access_token=${urlParams.access_token}` : \"\"\n    }`;\n    const urlQueryString = `${headers}${gid}${sheet}${queryString}${access_token}`;\n    const urlToSpreadSheet = `${spreadSheetUrl}/gviz/tq?${urlQueryString}`; //&tq=${queryString}`;\n    const query = new googleViz.visualization.Query(urlToSpreadSheet);\n    query.send((response: any) => {\n      if (response.isError()) {\n        reject(\n          `Error in query:  ${response.getMessage()} ${response.getDetailedMessage()}`\n        );\n      } else {\n        resolve(response.getDataTable());\n      }\n    });\n  });\n};\n","import * as React from \"react\";\nimport { chartDefaultProps } from \"./default-props\";\n\nimport { ReactGoogleChartProps } from \"./types\";\nconst { Provider, Consumer } = React.createContext(chartDefaultProps);\n\nexport const ContextProvider = ({\n  children,\n  value,\n}: {\n  children: any;\n  value: ReactGoogleChartProps;\n}) => {\n  return <Provider value={value}>{children}</Provider>;\n};\n\nexport const ContextConsumer = ({\n  render,\n}: {\n  render: (context: ReactGoogleChartProps) => JSX.Element | null;\n}) => {\n  return (\n    <Consumer>\n      {(context) => {\n        return render(context as ReactGoogleChartProps);\n      }}\n    </Consumer>\n  );\n};\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  GoogleDataTable,\n  ReactGoogleChartProps,\n  GoogleChartDashboard,\n} from \"../types\";\nimport { DEFAULT_CHART_COLORS } from \"../constants\";\n\nimport { loadDataTableFromSpreadSheet } from \"../load-data-table-from-spreadsheet\";\nimport { ContextConsumer } from \"../Context\";\n\nconst GRAY_COLOR = \"#CCCCCC\";\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport type GoogleChartDataTableProps = {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  googleChartDashboard: GoogleChartDashboard | null;\n};\ninterface State {\n  hiddenColumns: string[];\n}\nexport class GoogleChartDataTableInner extends React.Component<\n  ReactGoogleChartProps & GoogleChartDataTableProps,\n  State\n> {\n  state = {\n    hiddenColumns: [],\n  } as State;\n\n  private listenToLegendToggle = () => {\n    const { google, googleChartWrapper } = this.props;\n    google.visualization.events.addListener(\n      googleChartWrapper,\n      \"select\",\n      () => {\n        const chart = googleChartWrapper.getChart();\n        const selection = chart.getSelection();\n        const dataTable = googleChartWrapper.getDataTable();\n        if (\n          selection.length === 0 ||\n          // We want to listen to when a whole row is selected. This is the case only when row === null\n          selection[0].row ||\n          !dataTable\n        ) {\n          return;\n        }\n        const columnIndex = selection[0].column;\n        const columnID = this.getColumnID(dataTable, columnIndex);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [\n              ...state.hiddenColumns.filter((colID) => colID !== columnID),\n            ],\n          }));\n        } else {\n          this.setState((state) => ({\n            ...state,\n            hiddenColumns: [...state.hiddenColumns, columnID],\n          }));\n        }\n      }\n    );\n  };\n\n  private applyFormatters = (dataTable: GoogleDataTable, formatters: any[]) => {\n    const { google } = this.props;\n    for (let formatter of formatters) {\n      switch (formatter.type) {\n        case \"ArrowFormat\": {\n          const vizFormatter = new google.visualization.ArrowFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"BarFormat\": {\n          const vizFormatter = new google.visualization.BarFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"ColorFormat\": {\n          const vizFormatter = new google.visualization.ColorFormat(\n            formatter.options\n          );\n          const { ranges } = formatter;\n          for (let range of ranges) {\n            vizFormatter.addRange(...range);\n          }\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"DateFormat\": {\n          const vizFormatter = new google.visualization.DateFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"NumberFormat\": {\n          const vizFormatter = new google.visualization.NumberFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n        case \"PatternFormat\": {\n          const vizFormatter = new google.visualization.PatternFormat(\n            formatter.options\n          );\n          vizFormatter.format(dataTable, formatter.column);\n          break;\n        }\n      }\n    }\n  };\n  private getColumnID = (dataTable: GoogleDataTable, columnIndex: number) => {\n    return (\n      dataTable.getColumnId(columnIndex) ||\n      dataTable.getColumnLabel(columnIndex)\n    );\n  };\n  private draw = async ({\n    data,\n    diffdata,\n    rows,\n    columns,\n    options,\n    legend_toggle,\n    legendToggle,\n    chartType,\n    formatters,\n    spreadSheetUrl,\n    spreadSheetQueryParameters,\n  }: ReactGoogleChartProps) => {\n    const { google, googleChartWrapper } = this.props;\n    let dataTable: GoogleDataTable;\n    let chartDiff = null;\n    if (diffdata) {\n      const oldData = google.visualization.arrayToDataTable(diffdata.old);\n      const newData = google.visualization.arrayToDataTable(diffdata.new);\n      chartDiff = google.visualization[chartType].prototype.computeDiff(\n        oldData,\n        newData\n      );\n    }\n    if (data !== null) {\n      if (Array.isArray(data)) {\n        dataTable = google.visualization.arrayToDataTable(data);\n      } else {\n        dataTable = new google.visualization.DataTable(data);\n      }\n    } else if (rows && columns) {\n      dataTable = google.visualization.arrayToDataTable([columns, ...rows]);\n    } else if (spreadSheetUrl) {\n      dataTable = (await loadDataTableFromSpreadSheet(\n        google,\n        spreadSheetUrl,\n        spreadSheetQueryParameters\n      )) as GoogleDataTable;\n    } else {\n      dataTable = google.visualization.arrayToDataTable([]);\n    }\n    const columnCount = dataTable.getNumberOfColumns();\n    for (let i = 0; i < columnCount; i += 1) {\n      const columnID = this.getColumnID(dataTable, i);\n      if (this.state.hiddenColumns.includes(columnID)) {\n        const previousColumnLabel = dataTable.getColumnLabel(i);\n        const previousColumnID = dataTable.getColumnId(i);\n        const previousColumnType = dataTable.getColumnType(i);\n        dataTable.removeColumn(i);\n        dataTable.addColumn({\n          label: previousColumnLabel,\n          id: previousColumnID,\n          type: previousColumnType,\n        });\n      }\n    }\n    const chart = googleChartWrapper.getChart();\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      chart && chart.clearChart();\n    }\n    googleChartWrapper.setChartType(chartType);\n    googleChartWrapper.setOptions(options || {});\n    googleChartWrapper.setDataTable(dataTable);\n    googleChartWrapper.draw();\n    if (this.props.googleChartDashboard !== null) {\n      this.props.googleChartDashboard.draw(dataTable);\n    }\n\n    if (chartDiff) {\n      googleChartWrapper.setDataTable(chartDiff);\n      googleChartWrapper.draw();\n    }\n    if (formatters) {\n      this.applyFormatters(dataTable, formatters);\n      googleChartWrapper.setDataTable(dataTable);\n      googleChartWrapper.draw();\n    }\n    if (legendToggle === true || legend_toggle === true) {\n      this.grayOutHiddenColumns({ options });\n    }\n    return;\n  };\n  private grayOutHiddenColumns = ({\n    options,\n  }: {\n    options: ReactGoogleChartProps[\"options\"];\n  }) => {\n    const { googleChartWrapper } = this.props;\n    const dataTable = googleChartWrapper.getDataTable();\n    if (!dataTable) return;\n    const columnCount = dataTable.getNumberOfColumns();\n    const hasAHiddenColumn = this.state.hiddenColumns.length > 0;\n    if (hasAHiddenColumn === false) return;\n    const colors = Array.from({ length: columnCount - 1 }).map(\n      (dontcare, i) => {\n        const columnID = this.getColumnID(dataTable, i + 1);\n        if (this.state.hiddenColumns.includes(columnID)) {\n          return GRAY_COLOR;\n        } else if (options && options.colors) {\n          return options.colors[i];\n        } else {\n          return DEFAULT_CHART_COLORS[i];\n        }\n      }\n    );\n    googleChartWrapper.setOptions({\n      ...options,\n      colors,\n    });\n    googleChartWrapper.draw();\n  };\n  private onResize = () => {\n    const { googleChartWrapper } = this.props;\n    googleChartWrapper.draw();\n  };\n  componentDidMount() {\n    this.draw(this.props);\n    window.addEventListener(\"resize\", this.onResize);\n    if (this.props.legend_toggle || this.props.legendToggle) {\n      this.listenToLegendToggle();\n    }\n  }\n\n  componentWillUnmount() {\n    const { google, googleChartWrapper } = this.props;\n    window.removeEventListener(\"resize\", this.onResize);\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    if (googleChartWrapper.getChartType() === \"Timeline\") {\n      googleChartWrapper.getChart() &&\n        googleChartWrapper.getChart().clearChart();\n    }\n  }\n\n  componentDidUpdate() {\n    this.draw(this.props);\n  }\n  render() {\n    return null;\n  }\n}\n\nexport class GoogleChartDataTable extends React.Component<GoogleChartDataTableProps> {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n  shouldComponentUpdate() {\n    return false;\n  }\n  render() {\n    const { google, googleChartWrapper, googleChartDashboard } = this.props;\n    return (\n      <ContextConsumer\n        render={(props) => {\n          return (\n            <GoogleChartDataTableInner\n              {...props}\n              google={google}\n              googleChartWrapper={googleChartWrapper}\n              googleChartDashboard={googleChartDashboard}\n            />\n          );\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  ReactGoogleChartEvent,\n} from \"../types\";\n\nimport { ContextConsumer } from \"../Context\";\n\nexport type ChartDrawArgs = {\n  data: ReactGoogleChartProps[\"data\"];\n};\n\nexport interface Props {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n}\n\nexport interface ListenToEventsArgs {\n  googleChartWrapper: GoogleChartWrapper;\n  google: GoogleViz;\n  chartEvents: ReactGoogleChartEvent[] | null;\n}\n\nexport class GoogleChartEvents extends React.Component<Props> {\n  shouldComponentUpdate() {\n    return false;\n  }\n  listenToEvents({\n    chartEvents,\n    google,\n    googleChartWrapper,\n  }: ListenToEventsArgs) {\n    if (!chartEvents) {\n      return;\n    }\n    google.visualization.events.removeAllListeners(googleChartWrapper);\n    for (let event of chartEvents) {\n      const { eventName, callback } = event;\n      google.visualization.events.addListener(\n        googleChartWrapper,\n        eventName,\n        (...args: any[]) => {\n          callback({\n            chartWrapper: googleChartWrapper,\n            props: this.props as any,\n            google: google,\n            eventArgs: args,\n          });\n        }\n      );\n    }\n  }\n  render() {\n    const { google, googleChartWrapper } = this.props;\n    return (\n      <ContextConsumer\n        render={(propsFromContext) => {\n          this.listenToEvents({\n            chartEvents: propsFromContext.chartEvents || null,\n            google,\n            googleChartWrapper,\n          });\n          return null;\n        }}\n      />\n    );\n  }\n}\n","import * as React from \"react\";\nimport {\n  GoogleViz,\n  GoogleChartWrapper,\n  ReactGoogleChartProps,\n  GoogleChartControlProp,\n  GoogleChartControl,\n  GoogleChartDashboard,\n  GoogleChartEditor,\n} from \"../types\";\nimport { generateUniqueID } from \"../generate-unique-id\";\nimport { GoogleChartDataTable } from \"./GoogleChartDataTable\";\nimport { GoogleChartEvents } from \"./GoogleChartEvents\";\n\nexport type Props = {\n  google: GoogleViz;\n  graphID?: string | null;\n  graph_id?: string | null;\n  options?: ReactGoogleChartProps[\"options\"];\n  chartWrapperParams?: {};\n  chartType: ReactGoogleChartProps[\"chartType\"];\n  width?: ReactGoogleChartProps[\"width\"];\n  height?: ReactGoogleChartProps[\"height\"];\n  style?: ReactGoogleChartProps[\"style\"];\n  className?: ReactGoogleChartProps[\"className\"];\n  rootProps?: ReactGoogleChartProps[\"rootProps\"];\n} & ReactGoogleChartProps;\n\nexport interface State {\n  googleChartWrapper: GoogleChartWrapper | null;\n  isReady: boolean;\n  googleChartDashboard: GoogleChartDashboard | null;\n  googleChartEditor: GoogleChartEditor | null;\n  googleChartControls:\n    | { control: GoogleChartControl; controlProp: GoogleChartControlProp }[]\n    | null;\n}\n\nlet controlCounter = 0;\n\nexport class GoogleChart extends React.Component<Props, State> {\n  state = {\n    googleChartWrapper: null,\n    googleChartDashboard: null,\n    googleChartControls: null,\n    googleChartEditor: null,\n    isReady: false,\n  } as State;\n  graphID: null | string = null;\n  private dashboard_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private toolbar_ref: React.RefObject<HTMLDivElement> = React.createRef();\n  private getGraphID = () => {\n    const { graphID, graph_id } = this.props;\n    let instanceGraphID: string;\n    if (!graphID && !graph_id) {\n      if (!this.graphID) {\n        instanceGraphID = generateUniqueID();\n      } else {\n        instanceGraphID = this.graphID;\n      }\n    } else if (graphID && !graph_id) {\n      instanceGraphID = graphID as string;\n    } else if (graph_id && !graphID) {\n      instanceGraphID = graph_id as string;\n    } else {\n      instanceGraphID = graphID as string;\n    }\n    this.graphID = instanceGraphID;\n    return this.graphID as string;\n  };\n  private getControlID = (id: undefined | string, index: number) => {\n    controlCounter += 1;\n    let controlID: string;\n    if (typeof id === \"undefined\") {\n      controlID = `googlechart-control-${index}-${controlCounter}`;\n    } else {\n      controlID = id;\n    }\n    return controlID;\n  };\n\n  addControls = (\n    googleChartWrapper: GoogleChartWrapper,\n    googleChartDashboard: GoogleChartDashboard\n  ) => {\n    const { google, controls } = this.props;\n\n    const googleChartControls = !controls\n      ? null\n      : controls.map((control, i) => {\n          const {\n            controlID: controlIDMaybe,\n            controlType,\n            options: controlOptions,\n            controlWrapperParams,\n          } = control;\n          const controlID = this.getControlID(controlIDMaybe, i);\n          return {\n            controlProp: control,\n            control: new google.visualization.ControlWrapper({\n              containerId: controlID,\n              controlType,\n              options: controlOptions,\n              ...controlWrapperParams,\n            }),\n          };\n        });\n    if (!googleChartControls) {\n      return null;\n    }\n    googleChartDashboard.bind(\n      googleChartControls.map(({ control }) => control),\n      googleChartWrapper\n    );\n    for (let chartControl of googleChartControls) {\n      const { control, controlProp } = chartControl;\n      const { controlEvents = [] } = controlProp;\n      for (let event of controlEvents) {\n        const { callback, eventName } = event;\n        google.visualization.events.removeListener(\n          control,\n          eventName,\n          callback\n        );\n        google.visualization.events.addListener(\n          control,\n          eventName,\n          (...args: any[]) => {\n            callback({\n              chartWrapper: googleChartWrapper,\n              controlWrapper: control,\n              props: this.props as any,\n              google: google,\n              eventArgs: args,\n            });\n          }\n        );\n      }\n    }\n    return googleChartControls;\n  };\n\n  componentDidMount() {\n    const {\n      options,\n      google,\n      chartType,\n      chartWrapperParams,\n      toolbarItems,\n      getChartEditor,\n      getChartWrapper,\n    } = this.props;\n\n    const chartConfig = {\n      chartType,\n      options,\n      containerId: this.getGraphID(),\n      ...chartWrapperParams,\n    };\n    const googleChartWrapper = new google.visualization.ChartWrapper(\n      chartConfig\n    );\n    googleChartWrapper.setOptions(options || {});\n    if (getChartWrapper) {\n      getChartWrapper(googleChartWrapper, google);\n    }\n    const googleChartDashboard = new google.visualization.Dashboard(\n      this.dashboard_ref\n    );\n\n    const googleChartControls = this.addControls(\n      googleChartWrapper,\n      googleChartDashboard\n    );\n    if (toolbarItems) {\n      google.visualization.drawToolbar(\n        this.toolbar_ref.current as HTMLDivElement,\n        toolbarItems\n      );\n    }\n    let googleChartEditor: null | GoogleChartEditor = null;\n    if (getChartEditor) {\n      googleChartEditor = new google.visualization.ChartEditor();\n      getChartEditor({\n        chartEditor: googleChartEditor,\n        chartWrapper: googleChartWrapper,\n        google,\n      });\n    }\n\n    this.setState({\n      googleChartEditor,\n      googleChartControls: googleChartControls,\n      googleChartDashboard: googleChartDashboard,\n      googleChartWrapper,\n      isReady: true,\n    });\n  }\n  componentDidUpdate() {\n    if (!this.state.googleChartWrapper) return;\n    if (!this.state.googleChartDashboard) return;\n    if (!this.state.googleChartControls) return;\n\n    const { controls } = this.props;\n    if (controls) {\n      for (let i = 0; i < controls.length; i += 1) {\n        const { controlType, options, controlWrapperParams } = controls[i];\n        if (controlWrapperParams && \"state\" in controlWrapperParams) {\n          this.state.googleChartControls[i].control.setState(\n            controlWrapperParams[\"state\"]\n          );\n        }\n        this.state.googleChartControls[i].control.setOptions(options);\n        this.state.googleChartControls[i].control.setControlType(controlType);\n      }\n    }\n  }\n  shouldComponentUpdate(nextProps: Props, nextState: State) {\n    return (\n      this.state.isReady !== nextState.isReady ||\n      nextProps.controls !== this.props.controls\n    );\n  }\n  renderChart = () => {\n    const { width, height, options, style, className, rootProps, google } =\n      this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    return (\n      <div\n        id={this.getGraphID()}\n        style={divStyle}\n        className={className}\n        {...rootProps}\n      >\n        {this.state.isReady && this.state.googleChartWrapper !== null ? (\n          <React.Fragment>\n            <GoogleChartDataTable\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n              googleChartDashboard={this.state.googleChartDashboard}\n            />\n            <GoogleChartEvents\n              googleChartWrapper={this.state.googleChartWrapper}\n              google={google}\n            />\n          </React.Fragment>\n        ) : null}\n      </div>\n    );\n  };\n  renderControl = (\n    filter = ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => true\n  ) => {\n    return this.state.isReady && this.state.googleChartControls !== null ? (\n      <React.Fragment>\n        {this.state.googleChartControls\n          .filter(({ controlProp, control }) => {\n            return filter({ control, controlProp });\n          })\n          .map(({ control, controlProp }) => {\n            return (\n              <div\n                key={control.getContainerId()}\n                id={control.getContainerId()}\n              />\n            );\n          })}\n      </React.Fragment>\n    ) : null;\n  };\n  renderToolBar = () => {\n    if (!this.props.toolbarItems) return null;\n    return <div ref={this.toolbar_ref} />;\n  };\n  render() {\n    const { width, height, options, style } = this.props;\n\n    const divStyle = {\n      height: height || (options && options.height),\n      width: width || (options && options.width),\n      ...style,\n    };\n    if (this.props.render) {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          <div ref={this.toolbar_ref} id=\"toolbar\" />\n          {this.props.render({\n            renderChart: this.renderChart,\n            renderControl: this.renderControl,\n            renderToolbar: this.renderToolBar,\n          })}\n        </div>\n      );\n    } else {\n      return (\n        <div ref={this.dashboard_ref} style={divStyle}>\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition !== \"bottom\";\n          })}\n          {this.renderChart()}\n          {this.renderControl(({ controlProp }) => {\n            return controlProp.controlPosition === \"bottom\";\n          })}\n          {this.renderToolBar()}\n        </div>\n      );\n    }\n  }\n}\n","import * as React from \"react\";\n\nimport {\n  GoogleViz,\n  ReactGoogleChartProps,\n  ReactGoogleChartState,\n} from \"./types\";\nimport { LoadGoogleCharts } from \"./hooks\";\nimport { chartDefaultProps } from \"./default-props\";\nimport { GoogleChart } from \"./components/GoogleChart\";\nimport { ContextProvider } from \"./Context\";\n\nexport class Chart extends React.Component<\n  ReactGoogleChartProps,\n  ReactGoogleChartState\n> {\n  _isMounted = false;\n\n  state = {\n    loadingStatus: \"loading\" as ReactGoogleChartState[\"loadingStatus\"],\n    google: null as ReactGoogleChartState[\"google\"],\n  };\n\n  static defaultProps = chartDefaultProps;\n\n  render() {\n    const {\n      chartLanguage,\n      chartPackages,\n      chartVersion,\n      mapsApiKey,\n      loader,\n      errorElement,\n    } = this.props;\n    return (\n      <ContextProvider value={this.props as ReactGoogleChartProps}>\n        {this.state.loadingStatus === \"ready\" && this.state.google !== null ? (\n          <GoogleChart\n            {...(this.props as ReactGoogleChartProps)}\n            google={this.state.google}\n          />\n        ) : this.state.loadingStatus === \"errored\" && errorElement ? (\n          errorElement\n        ) : (\n          loader\n        )}\n        <LoadGoogleCharts\n          chartLanguage={chartLanguage}\n          chartPackages={chartPackages}\n          chartVersion={chartVersion}\n          mapsApiKey={mapsApiKey}\n          onLoad={this.onLoad}\n          onError={this.onError}\n        />\n      </ContextProvider>\n    );\n  }\n\n  componentDidMount() {\n    this._isMounted = true;\n  }\n\n  componentWillUnmount() {\n    this._isMounted = false;\n  }\n\n  onLoad = (google: GoogleViz) => {\n    if (this.props.onLoad) {\n      this.props.onLoad(google);\n    }\n    if (this.isFullyLoaded(google)) {\n      this.onSuccess(google);\n    } else {\n      // IE11: window.google is not fully set, we have to wait\n      const id = setInterval(() => {\n        const google = (\n          window as Window & {\n            google?: GoogleViz;\n          }\n        ).google;\n\n        if (this._isMounted) {\n          if (google && this.isFullyLoaded(google)) {\n            clearInterval(id);\n            this.onSuccess(google);\n          }\n        } else {\n          clearInterval(id);\n        }\n      }, 1000);\n    }\n  };\n\n  onSuccess = (google: GoogleViz) => {\n    this.setState({\n      loadingStatus: \"ready\",\n      google,\n    });\n  };\n\n  onError = () => {\n    this.setState({\n      loadingStatus: \"errored\",\n    });\n  };\n\n  isFullyLoaded(google: GoogleViz) {\n    const { controls, toolbarItems, getChartEditor } = this.props;\n\n    return (\n      google &&\n      google.visualization &&\n      google.visualization.ChartWrapper &&\n      google.visualization.Dashboard &&\n      (!controls || google.visualization.ChartWrapper) &&\n      (!getChartEditor || google.visualization.ChartEditor) &&\n      (!toolbarItems || google.visualization.drawToolbar)\n    );\n  }\n}\n\nexport default Chart;\n","// Complete Google Charts Type Definition : https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/google.visualization/index.d.ts\n\nexport type GoogleVizDrawToolbar = (\n  toolbarContainer: HTMLDivElement,\n  components: GoogleChartToolbarItem[]\n) => any;\n\nexport type GoogleViz = {\n  charts: GoogleChartLoader;\n  visualization: {\n    ChartWrapper: GoogleChartWrapper;\n    ChartEditor: GoogleChartEditor;\n    DataTable: GoogleDataTable;\n    events: GoogleVizEvents;\n    arrayToDataTable: GoogleArrayToDataTable;\n    drawToolbar: GoogleVizDrawToolbar;\n    [otherKeys: string]: any;\n  };\n};\n\nexport type GoogleChartTicks = (number | Date)[];\n\nexport type GoogleChartEditor = {\n  new (): GoogleChartEditor;\n  openDialog: (\n    chartWrapper: GoogleChartWrapper,\n    chartEditorOptions?: { dataSourceInput?: any; [otherKeyMaybe: string]: any }\n  ) => null;\n  getChartWrapper: () => GoogleChartWrapper;\n  setChartWrapper: (chartWrapper: GoogleChartWrapper) => GoogleChartWrapper;\n  closeDialog: () => null;\n};\n\nexport type GoogleChartLoaderOptions = {\n  packages?: GoogleChartPackages[];\n  language?: string;\n  mapsApiKey?: string;\n};\nexport type GoogleChartLoader = {\n  load: (\n    version: GoogleChartVersion,\n    googleChartOptions: GoogleChartLoaderOptions\n  ) => void;\n  setOnLoadCallback: (callback: () => void) => void;\n};\nexport interface ChartWrapperProps {\n  chartType: GoogleChartWrapperChartType;\n  containerId?: string;\n  options?: {\n    width?: number;\n    height?: number;\n    is3D?: boolean;\n    title?: string;\n    backgroundColor: string;\n  };\n  dataTable?: {};\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view?: any[] | {};\n  render?: (props: ChartWrapperProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (\n    props: ChartWrapperProps,\n    chartWrapper: GoogleChartWrapper\n  ) => any;\n}\n\nexport type VizEventsProps = {\n  chartWrapper: GoogleChartWrapper;\n  onReady?: (chartWrapper: GoogleChartWrapper) => any;\n  onError?: (chartWrapper: GoogleChartWrapper) => any;\n  onSelect?: (selection: Array<{ row?: any; column?: any }>) => any;\n  render?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n  children?: (props: VizEventsProps, chartWrapper: GoogleChartWrapper) => any;\n};\n\n/*\n *\n * <GoogleChartsTypes>\n *\n */\n\n/*\n *\n * Reference + Docs:\n * https://developers.google.com/chart/interactive/docs/reference#constructor_3\n * https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\n *\n */\nexport type GoogleChartWrapperChartType =\n  | \"AnnotationChart\"\n  | \"AreaChart\"\n  | \"BarChart\"\n  | \"BubbleChart\"\n  | \"Calendar\"\n  | \"CandlestickChart\"\n  | \"ColumnChart\"\n  | \"ComboChart\"\n  | \"DiffChart\"\n  | \"DonutChart\"\n  | \"Gantt\"\n  | \"Gauge\"\n  | \"GeoChart\"\n  | \"Histogram\"\n  | \"LineChart\"\n  | \"Line\"\n  | \"Bar\"\n  | \"Map\"\n  | \"OrgChart\"\n  | \"PieChart\"\n  | \"Sankey\"\n  | \"ScatterChart\"\n  | \"Scatter\"\n  | \"SteppedAreaChart\"\n  | \"Table\"\n  | \"Timeline\"\n  | \"TreeMap\"\n  | \"WaterfallChart\"\n  | \"WordTree\";\n\n// https://developers.google.com/chart/interactive/docs/reference#google.visualization.drawchart\nexport interface ChartWrapperOptions {\n  chartType: string;\n  containerId: string;\n  options: Partial<{\n    width: number;\n    height: number;\n    is3D: boolean;\n    title: string;\n    backgroundColor: string;\n    hAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    vAxis?: {\n      minValue?: any;\n      maxValue?: any;\n      ticks?: GoogleChartTicks;\n      title?: string;\n      viewWindow?: { max?: any; min?: any };\n      [otherOptionKey: string]: any;\n    };\n    legend: any;\n    colors: string[];\n    [otherOptionKey: string]: any;\n  }>;\n  dataTable?: GoogleDataTable;\n  dataSourceUrl?: string;\n  query?: string;\n  refreshInterval?: number;\n  view: any[] | {};\n  [otherOptionKey: string]: any;\n}\n\nexport type GoogleChartAction = {\n  id: string;\n  text: string;\n  action: (chartWrapper: GoogleChartWrapper) => void;\n};\n\nexport type GoogleChartControlProp = {\n  controlType:\n    | \"CategoryFilter\"\n    | \"ChartRangeFilter\"\n    | \"DateRangeFilter\"\n    | \"NumberRangeFilter\"\n    | \"StringFilter\";\n  options: {};\n  controlWrapperParams?: {};\n  controlID?: string;\n  controlPosition?: \"top\" | \"bottom\";\n  controlEvents?: ReactGoogleChartEvent[];\n};\n\nexport type GoogleChartWrapper = {\n  new (chartWrapperOptions: Partial<ChartWrapperOptions>): GoogleChartWrapper;\n  draw: (chartArgs?: ChartWrapperProps) => any;\n  toJSON: () => string;\n  clone: () => GoogleChartWrapper;\n  getDataSourceUrl: () => string;\n  getDataTable: () => GoogleDataTable | null; // null if datasourceurl set or ref to DataTable\n  getChartType: () => GoogleChartWrapperChartType;\n  getChartName: () => string;\n  getChart: () => {\n    removeAction: (actionID: string) => void;\n    getSelection: () => { row?: any; column?: any }[];\n    setAction: (ChartAction: GoogleChartAction) => void;\n    getImageURI: () => void;\n    clearChart: () => void; // Clears the chart, and releases all of its allocated resources.\n  }; // ref to chart\n  getContainerId: () => string;\n  getQuery: () => string;\n  getRefreshInterval: () => number;\n  getOption: (key: string, opt_default_value?: any) => any; // returns opt_default_value if key not found\n  getOptions: () => {};\n  getSelection: () => { row?: any; column?: any }[];\n  getView: () => {} | any[]; // Same format as toJSON\n\n  setDataSourceUrl: (url: string) => void;\n  setDataTable: (table: any) => void;\n  setChartType: (chartType: GoogleChartWrapperChartType) => void;\n  setChartName: (name: string) => void; // Sets an arbitrary name for the chart. This is not shown anywhere on the chart, unless a custom chart is explicitly designed to use it.\n  setContainerId: (id: string) => void; // Sets the ID of the containing DOM element for the chart.\n  setQuery: (query_string: string) => void; // Sets a query string, if this chart queries a data source. You must also set the data source URL if specifying this value.\n  setRefreshInterval: (interval: number) => void; // Sets the refresh interval for this chart, if it queries a data source. You must also set a data source URL if specifying this value. Zero indicates no refresh.\n  setOption: (key: string, value: any) => void; // \tSets a single chart option value, where key is the option name and value is the value. To unset an option, pass in null for the value. Note that key may be a qualified name, such as 'vAxis.title'.\n  setOptions: (options_obj: Partial<ChartWrapperOptions[\"options\"]>) => void; //\n};\n\nexport type GoogleVizEventName =\n  | \"ready\"\n  | \"error\"\n  | \"select\"\n  | \"animationfinish\"\n  | \"statechange\"\n  | \"ok\"\n  | \"cancel\"\n  | \"animationstart\";\n\nexport type GoogleVizEvents = {\n  addListener: (\n    chartWrapper: GoogleChartWrapper | GoogleChartControl | GoogleChartEditor,\n    name: GoogleVizEventName,\n    onEvent: (chartWrapper: GoogleChartWrapper) => any\n  ) => any;\n  removeListener: (\n    chartWrapper: GoogleChartWrapper,\n    name: GoogleVizEventName,\n    callback: Function\n  ) => any;\n  removeAllListeners: (chartWrapper: GoogleChartWrapper) => any;\n};\n\nexport type GoogleChartPackages =\n  | \"corechart\"\n  | \"charteditor\"\n  | \"controls\"\n  | \"calendar\"\n  | \"gantt\"\n  | \"gauge\"\n  | \"geochart\"\n  | \"map\"\n  | \"orgchart\"\n  | \"sankey\"\n  | \"table\"\n  | \"timeline\"\n  | \"treemap\"\n  | \"wordtree\";\n\nexport type GoogleChartVersion = \"current\" | \"upcoming\";\n\nexport type GoogleDataTableColumnType =\n  | \"string\"\n  | \"number\"\n  | \"boolean\"\n  | \"date\"\n  | \"datetime\"\n  | \"timeofday\";\n\n// export type GoogleDataTable = {\n//   addColumn: (type: GoogleDataTableColumnType) => number;\n// };\n\n// Reference https://developers.google.com/chart/interactive/docs/roles\nexport enum GoogleDataTableColumnRoleType {\n  annotation = \"annotation\",\n  annotationText = \"annotationText\",\n  certainty = \"certainty\",\n  emphasis = \"emphasis\",\n  interval = \"interval\",\n  scope = \"scope\",\n  style = \"style\",\n  tooltip = \"tooltip\",\n  domain = \"domain\",\n}\n\nexport type GoogleDataTableColumn =\n  | {\n      type: GoogleDataTableColumnType;\n      label?: string; //  A label for the column.\n      role?: GoogleDataTableColumnRoleType;\n      pattern?: string;\n      p?: {};\n      id?: string;\n    }\n  | string;\n\n// Ref : https://developers.google.com/chart/interactive/docs/reference#dataparam\n\nexport type GoogleDataTableCell =\n  | {\n      v?: any; // The cell value. Type should match DataTableColumn type field\n      f?: string; // A string version of the v value, formatted for display.\n      p?: {};\n    }\n  | string\n  | number\n  | boolean\n  | Date;\n\nexport type GoogleDataTableRow = GoogleDataTableCell[];\n\nexport type GoogleDataTableJS = {\n  cols: GoogleDataTableColumn[];\n  rows: {\n    c: GoogleDataTableRow;\n  }[];\n  p?: {};\n};\n\n// Reference : https://developers.google.com/chart/interactive/docs/reference#DataTable\n\nexport type GoogleDataTableRowFilter = {\n  column: number;\n  value: any;\n  minValue?: any;\n  maxValue?: any;\n};\n\nexport type GoogleDataTableSortColumns =\n  | number\n  | {\n      column: number;\n      desc: boolean;\n    }\n  | number[]\n  | {\n      column: number;\n      desc: boolean;\n    }[];\n\nexport type GoogleDataTable = {\n  // https://developers.google.com/chart/interactive/docs/reference#dataparam\n  new (dataParam: any): GoogleDataTable;\n  addColumn: (column: GoogleDataTableColumn) => number;\n  addRow: (row?: GoogleDataTableRow) => number;\n  addRows: (rows?: GoogleDataTableRow[] | number[] | any[]) => number;\n  clone: () => GoogleDataTable;\n\n  getColumnId: (columnIndex: number) => string;\n  getColumnLabel: (columnIndex: number) => string;\n  getColumnPattern: (columnIndex: number) => string;\n  getColumnProperties: (columnIndex: number) => {};\n  getColumnProperty: (columnIndex: number, name: string) => any;\n  getColumnRange: (columnIndex: number) => {\n    min: number | null;\n    max: number | null;\n  };\n  getColumnRole: (columnIndex: number) => GoogleDataTableColumnRoleType;\n  getColumnType: (columnIndex: number) => GoogleDataTableColumnType;\n  getDistinctValues: (columnIndex: number) => any[];\n  getFilteredRows: (filters: GoogleDataTableRowFilter[]) => number[];\n  getFormattedValue: (rowIndex: number, columnIndex: number) => string;\n  getNumberOfColumns: () => number;\n  getNumberOfRows: () => number;\n  getProperties: (rowIndex: number, columnIndex: number) => {};\n  getProperty: (rowIndex: number, columnIndex: number, name: string) => any;\n  getRowProperties: (rowIndex: number) => {};\n  getRowProperty: (rowIndex: number, name: string) => any;\n  getSortedRows: (sortColumns: GoogleDataTableSortColumns) => number[];\n  getTableProperties: () => {};\n  getTableProperty: (name: string) => any;\n  getValue: (\n    rowIndex: number,\n    columnIndex: number\n  ) => boolean | string | number | Date | number[] | null;\n  insertColumn: (\n    columnIndex: number,\n    type: GoogleDataTableColumnType,\n    label?: string,\n    id?: string\n  ) => void;\n  insertRows: (\n    rowIndex: number,\n    numberOrArray: GoogleDataTableRow[] | number\n  ) => void;\n  removeColumn: (columnIndex: number) => void;\n  removeColumns: (columnIndex: number, numberOfColumns: number) => void;\n  removeRow: (rowIndex: number) => void;\n  removeRows: (rowIndex: number, numberOfColumns: number) => void;\n  setCell: (\n    rowIndex: number,\n    columnIndex: number,\n    value?: any,\n    formattedValue?: string,\n    properties?: {}\n  ) => {};\n  setColumnLabel: (columnIndex: number, label: string) => void;\n  setColumnProperty: (columnIndex: number, name: string, value: any) => void;\n  setColumnProperties: (columnIndex: number, properties: {} | null) => void;\n  setFormattedValue: (\n    rowIndex: number,\n    columnIndex: number,\n    formattedValue: string\n  ) => void;\n  setProperty: (\n    rowIndex: number,\n    columnIndex: number,\n    name: string,\n    value: any\n  ) => void;\n  setProperties: (\n    rowIndex: number,\n    columnIndex: number,\n    properties: {} | null\n  ) => void;\n\n  setRowProperty: (rowIndex: number, name: string, value: any) => void;\n  setRowProperties: (rowIndex: number, properties: {} | null) => void;\n  setTableProperties: (properties: {} | null) => void;\n  setValue: (rowIndex: number, columnIndex: number, value: string) => void;\n  sort: (sortColumns: GoogleDataTableSortColumns) => void;\n  toJSON: () => string; // GoogleDataTableJS\n};\n\nexport type GoogleArrayToDataTable = (\n  data: any[][],\n  isFirstRowLabels?: boolean\n) => GoogleDataTable;\n\nexport type GoogleChartOptions = {\n  width?: number;\n  height?: number;\n  is3D?: boolean;\n  backgroundColor: string;\n\n  title?: string;\n  hAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  vAxis?: {\n    minValue?: any;\n    maxValue?: any;\n    ticks?: GoogleChartTicks;\n    title?: string;\n    viewWindow?: { max?: any; min?: any; [otherOptionKey: string]: any };\n    [otherOptionKey: string]: any;\n  };\n  bubble?: {};\n  pieHole?: number;\n  redFrom?: number;\n  redTo?: number;\n  yellowFrom?: number;\n  yellowTo?: number;\n  minorTicks?: number;\n  legend?:\n    | string\n    | {\n        position?: string;\n        maxLines?: number;\n        [otherOptionKey: string]: any;\n      };\n  curveType?: string;\n  showTooltip?: boolean;\n  showInfoWindow?: boolean;\n  allowHtml?: boolean;\n  isStacked?: string | boolean;\n  minColor?: string;\n  midColor?: string;\n  maxColor?: string;\n  headerHeight?: number;\n  fontColor?: string;\n  showScale?: boolean;\n  bar?: { groupWidth?: string }; // Remove space between bars.\n  candlestick?: {\n    fallingColor?: { strokeWidth?: number; fill?: string }; // red\n    risingColor?: { strokeWidth?: number; fill?: string }; // green\n    [otherOptionKey: string]: any;\n  };\n  wordtree?: {\n    format?: string;\n    word?: string;\n    [otherOptionKey: string]: any;\n  };\n  [otherOptionKey: string]: any;\n};\n\n/*\n *\n * </GoogleChartsTypes>\n *\n */\n\nexport type WindowWithMaybeGoogle = Window & { google?: any };\n\nexport type ReactGoogleChartEvent = {\n  eventName: GoogleVizEventName;\n  callback: (eventCallbackArgs: {\n    chartWrapper: GoogleChartWrapper;\n    controlWrapper?: GoogleChartControl;\n    props: ReactGoogleChartProps;\n    google: GoogleViz;\n    eventArgs: any;\n  }) => void;\n};\n\nexport type GoogleChartToolbarItem = {\n  type: \"igoogle\" | \"html\" | \"csv\" | \"htmlcode\";\n  datasource: string;\n  gadget?: string;\n  userPrefs?: {\n    \"3d\": number;\n    [otherKeyMaybe: string]: any;\n  };\n};\n\nexport type ReactGoogleChartProps = {\n  height?: string | number;\n  width?: string | number;\n  graphID?: string;\n  chartType: GoogleChartWrapperChartType;\n  diffdata?: {\n    old: any;\n    new: any;\n  };\n  options?: ChartWrapperOptions[\"options\"];\n  loader?: JSX.Element;\n  errorElement?: JSX.Element;\n  data?: any[] | {};\n  rows?: GoogleDataTableRow[];\n  columns?: GoogleDataTableColumn[];\n  chartActions?: GoogleChartAction[];\n  chartEvents?: ReactGoogleChartEvent[];\n  chartVersion?: GoogleChartVersion;\n  chartPackages?: GoogleChartPackages[];\n  chartLanguage?: string;\n  mapsApiKey?: string;\n  graph_id?: string;\n  legendToggle?: boolean;\n  legend_toggle?: boolean;\n  onLoad?: (google: GoogleViz) => void;\n  getChartWrapper?: (\n    chartWrapper: GoogleChartWrapper,\n    google: GoogleViz\n  ) => void;\n  getChartEditor?: (args: {\n    chartEditor: GoogleChartEditor;\n    chartWrapper: GoogleChartWrapper;\n    google: GoogleViz;\n  }) => void;\n  className?: string;\n  style?: React.CSSProperties;\n  formatters?: {\n    column: number | number[];\n    type:\n      | \"ArrowFormat\"\n      | \"BarFormat\"\n      | \"ColorFormat\"\n      | \"DateFormat\"\n      | \"NumberFormat\"\n      | \"PatternFormat\";\n    options?: {};\n  }[];\n  spreadSheetUrl?: string;\n  spreadSheetQueryParameters?: {\n    headers: number;\n    gid?: number | string;\n    sheet?: string;\n    query?: string;\n    access_token?: string;\n  };\n  rootProps?: any;\n  controls?: GoogleChartControlProp[];\n  render?: ReactGoogleChartDashboardRender;\n  //https://developers.google.com/chart/interactive/docs/gallery/toolbar#example_1\n  toolbarItems?: GoogleChartToolbarItem[];\n  toolbarID?: string;\n  chartWrapperParams?: any;\n};\n\nexport type GoogleChartDashboard = {\n  draw: (data: GoogleDataTable) => void;\n  bind: (\n    controlWrapperOrWrappers: GoogleChartControl | GoogleChartControl[],\n    chartWrapper: GoogleChartWrapper\n  ) => void;\n};\n\nexport type ReactGoogleChartDashboardRender = ({\n  renderControl,\n  renderChart,\n  renderToolbar,\n}: {\n  renderControl: (\n    filter: ({\n      control,\n      controlProp,\n    }: {\n      control: GoogleChartControl;\n      controlProp: GoogleChartControlProp;\n    }) => boolean\n  ) => any;\n  renderChart: () => any;\n  renderToolbar: () => any;\n}) => any;\nexport type GoogleChartControlOptions = any;\nexport type GoogleChartControl = {\n  getContainerId: () => string;\n  getOptions: () => GoogleChartControlOptions;\n  getState: () => any;\n  setState: (state: any) => void;\n  setOptions: (options: GoogleChartControlOptions) => void;\n  setControlType: (controlType: string) => void;\n};\n\nexport type ReactGoogleChartState = {\n  loadingStatus: \"loading\" | \"errored\" | \"ready\";\n  google: null | GoogleViz;\n  // hiddenColumns: string[];\n};\n\nexport type ReactGoogleChartContext = {\n  data: ReactGoogleChartProps[\"data\"];\n  rows: ReactGoogleChartProps[\"rows\"] | null;\n  columns: ReactGoogleChartProps[\"columns\"] | null;\n  diffdata: ReactGoogleChartProps[\"diffdata\"] | null;\n  options: ReactGoogleChartProps[\"options\"] | null;\n  legend_toggle: ReactGoogleChartProps[\"legend_toggle\"] | null;\n  legendToggle: ReactGoogleChartProps[\"legendToggle\"] | null;\n  chartType: ReactGoogleChartProps[\"chartType\"] | null;\n  formatters: ReactGoogleChartProps[\"formatters\"] | null;\n  spreadSheetUrl: ReactGoogleChartProps[\"spreadSheetUrl\"] | null;\n  spreadSheetQueryParameters:\n    | ReactGoogleChartProps[\"spreadSheetQueryParameters\"]\n    | null;\n};\n","import { Chart } from \"./ReactGoogleCharts\";\n\nexport * from \"./types\";\nexport { Chart };\nexport default Chart;\n"]},"metadata":{},"sourceType":"module"}